import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable org.kde.elisa 1.0 .'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AbstractMediaProxyModel"
        prototype: "QSortFilterProxyModel"
        Property { name: "filterText"; type: "string" }
        Property { name: "filterRating"; type: "int" }
        Property { name: "sortedAscending"; type: "bool"; isReadonly: true }
        Property { name: "playList"; type: "MediaPlayListProxyModel"; isPointer: true }
        Signal {
            name: "filterTextChanged"
            Parameter { name: "filterText"; type: "string" }
        }
        Signal {
            name: "filterRatingChanged"
            Parameter { name: "filterRating"; type: "int" }
        }
        Signal {
            name: "entriesToEnqueue"
            Parameter { name: "newEntries"; type: "DataTypes::EntryDataList" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method {
            name: "setFilterText"
            Parameter { name: "filterText"; type: "string" }
        }
        Method {
            name: "setFilterRating"
            Parameter { name: "filterRating"; type: "int" }
        }
        Method {
            name: "sortModel"
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
        Method {
            name: "setPlayList"
            Parameter { name: "playList"; type: "MediaPlayListProxyModel"; isPointer: true }
        }
        Method {
            name: "enqueueToPlayList"
            Parameter { name: "rootIndex"; type: "QModelIndex" }
        }
        Method {
            name: "replaceAndPlayOfPlayList"
            Parameter { name: "rootIndex"; type: "QModelIndex" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newEntry"; type: "DataTypes::MusicDataType" }
            Parameter { name: "newEntryTitle"; type: "string" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
    }
    Component {
        name: "AudioWrapper"
        prototype: "QObject"
        exports: ["org.kde.elisa/AudioWrapper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "muted"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "QMediaPlayer::MediaStatus"; isReadonly: true }
        Property { name: "playbackState"; type: "QMediaPlayer::State"; isReadonly: true }
        Property { name: "error"; type: "QMediaPlayer::Error"; isReadonly: true }
        Property { name: "duration"; type: "qlonglong"; isReadonly: true }
        Property { name: "position"; type: "qlonglong" }
        Property { name: "seekable"; type: "bool"; isReadonly: true }
        Signal {
            name: "mutedChanged"
            Parameter { name: "muted"; type: "bool" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "QMediaPlayer::MediaStatus" }
        }
        Signal {
            name: "playbackStateChanged"
            Parameter { name: "state"; type: "QMediaPlayer::State" }
        }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "QMediaPlayer::Error" }
        }
        Signal {
            name: "durationChanged"
            Parameter { name: "duration"; type: "qlonglong" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "currentPlayingForRadiosChanged"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "nowPlaying"; type: "string" }
        }
        Signal {
            name: "seekableChanged"
            Parameter { name: "seekable"; type: "bool" }
        }
        Signal { name: "playing" }
        Signal { name: "paused" }
        Signal { name: "stopped" }
        Method {
            name: "setMuted"
            Parameter { name: "muted"; type: "bool" }
        }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "saveUndoPosition"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "restoreUndoPosition" }
        Method { name: "play" }
        Method { name: "pause" }
        Method { name: "stop" }
        Method {
            name: "seek"
            Parameter { name: "position"; type: "qlonglong" }
        }
    }
    Component {
        name: "DataModel"
        prototype: "QAbstractListModel"
        exports: ["org.kde.elisa/DataModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "author"; type: "string"; isReadonly: true }
        Property { name: "isBusy"; type: "bool"; isReadonly: true }
        Signal {
            name: "needData"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
        }
        Signal {
            name: "needDataById"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "databaseId"; type: "qulonglong" }
        }
        Signal {
            name: "needDataByGenre"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "genre"; type: "string" }
        }
        Signal {
            name: "needDataByArtist"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "artist"; type: "string" }
        }
        Signal {
            name: "needDataByGenreAndArtist"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "genre"; type: "string" }
            Parameter { name: "artist"; type: "string" }
        }
        Signal {
            name: "needRecentlyPlayedData"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
        }
        Signal {
            name: "needFrequentlyPlayedData"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
        }
        Method {
            name: "tracksAdded"
            Parameter { name: "newData"; type: "DataModel::ListTrackDataType" }
        }
        Method {
            name: "radiosAdded"
            Parameter { name: "newData"; type: "DataModel::ListRadioDataType" }
        }
        Method {
            name: "trackModified"
            Parameter { name: "modifiedTrack"; type: "DataModel::TrackDataType" }
        }
        Method {
            name: "trackRemoved"
            Parameter { name: "removedTrackId"; type: "qulonglong" }
        }
        Method {
            name: "radioRemoved"
            Parameter { name: "removedRadioId"; type: "qulonglong" }
        }
        Method {
            name: "genresAdded"
            Parameter { name: "newData"; type: "DataModel::ListGenreDataType" }
        }
        Method {
            name: "artistsAdded"
            Parameter { name: "newData"; type: "DataModel::ListArtistDataType" }
        }
        Method {
            name: "artistRemoved"
            Parameter { name: "removedDatabaseId"; type: "qulonglong" }
        }
        Method {
            name: "albumsAdded"
            Parameter { name: "newData"; type: "DataModel::ListAlbumDataType" }
        }
        Method {
            name: "albumRemoved"
            Parameter { name: "removedDatabaseId"; type: "qulonglong" }
        }
        Method {
            name: "albumModified"
            Parameter { name: "modifiedAlbum"; type: "DataModel::AlbumDataType" }
        }
        Method {
            name: "initialize"
            Parameter { name: "manager"; type: "MusicListenersManager"; isPointer: true }
            Parameter { name: "database"; type: "DatabaseInterface"; isPointer: true }
            Parameter { name: "modelType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "filter"; type: "ElisaUtils::FilterType" }
            Parameter { name: "genre"; type: "string" }
            Parameter { name: "artist"; type: "string" }
            Parameter { name: "databaseId"; type: "qulonglong" }
            Parameter { name: "pathFilter"; type: "QUrl" }
        }
        Method {
            name: "initializeByData"
            Parameter { name: "manager"; type: "MusicListenersManager"; isPointer: true }
            Parameter { name: "database"; type: "DatabaseInterface"; isPointer: true }
            Parameter { name: "modelType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "filter"; type: "ElisaUtils::FilterType" }
            Parameter { name: "dataFilter"; type: "DataTypes::DataType" }
        }
    }
    Component {
        name: "DataTypes"
        prototype: "QObject"
        exports: ["org.kde.elisa/DataTypes 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColumnsRoles"
            values: {
                "TitleRole": 257,
                "SecondaryTextRole": 258,
                "ImageUrlRole": 259,
                "ShadowForImageRole": 260,
                "ChildModelRole": 261,
                "DurationRole": 262,
                "StringDurationRole": 263,
                "ArtistRole": 264,
                "AllArtistsRole": 265,
                "HighestTrackRating": 266,
                "AlbumRole": 267,
                "AlbumArtistRole": 268,
                "IsValidAlbumArtistRole": 269,
                "TrackNumberRole": 270,
                "DiscNumberRole": 271,
                "RatingRole": 272,
                "GenreRole": 273,
                "LyricistRole": 274,
                "ComposerRole": 275,
                "CommentRole": 276,
                "YearRole": 277,
                "ChannelsRole": 278,
                "BitRateRole": 279,
                "SampleRateRole": 280,
                "ResourceRole": 281,
                "IdRole": 282,
                "ParentIdRole": 283,
                "DatabaseIdRole": 284,
                "IsSingleDiscAlbumRole": 285,
                "ContainerDataRole": 286,
                "IsPartialDataRole": 287,
                "AlbumIdRole": 288,
                "HasEmbeddedCover": 289,
                "FileModificationTime": 290,
                "FirstPlayDate": 291,
                "LastPlayDate": 292,
                "PlayCounter": 293,
                "PlayFrequency": 294,
                "ElementTypeRole": 295,
                "LyricsRole": 296,
                "FullDataRole": 297,
                "IsDirectoryRole": 298,
                "IsPlayListRole": 299,
                "FilePathRole": 300,
                "HasChildrenRole": 301
            }
        }
    }
    Component {
        name: "DatabaseInterface"
        prototype: "QObject"
        exports: ["org.kde.elisa/DatabaseInterface 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "artistsAdded"
            Parameter { name: "newArtists"; type: "DataTypes::ListArtistDataType" }
        }
        Signal {
            name: "composersAdded"
            Parameter { name: "newComposers"; type: "DataTypes::ListArtistDataType" }
        }
        Signal {
            name: "lyricistsAdded"
            Parameter { name: "newLyricists"; type: "DataTypes::ListArtistDataType" }
        }
        Signal {
            name: "albumsAdded"
            Parameter { name: "newAlbums"; type: "DataTypes::ListAlbumDataType" }
        }
        Signal {
            name: "tracksAdded"
            Parameter { name: "allTracks"; type: "DataTypes::ListTrackDataType" }
        }
        Signal {
            name: "genresAdded"
            Parameter { name: "allGenres"; type: "DataTypes::ListGenreDataType" }
        }
        Signal {
            name: "artistRemoved"
            Parameter { name: "removedArtistId"; type: "qulonglong" }
        }
        Signal {
            name: "albumRemoved"
            Parameter { name: "removedAlbumId"; type: "qulonglong" }
        }
        Signal {
            name: "trackRemoved"
            Parameter { name: "id"; type: "qulonglong" }
        }
        Signal {
            name: "albumModified"
            Parameter { name: "modifiedAlbum"; type: "DataTypes::AlbumDataType" }
            Parameter { name: "modifiedAlbumId"; type: "qulonglong" }
        }
        Signal {
            name: "trackModified"
            Parameter { name: "modifiedTrack"; type: "DataTypes::TrackDataType" }
        }
        Signal { name: "requestsInitDone" }
        Signal { name: "databaseError" }
        Signal {
            name: "restoredTracks"
            Parameter { name: "allFiles"; type: "QHash<QUrl,QDateTime>" }
        }
        Signal { name: "cleanedDatabase" }
        Signal { name: "finishInsertingTracksList" }
        Signal { name: "finishRemovingTracksList" }
        Signal {
            name: "radioAdded"
            Parameter { name: "radio"; type: "DataTypes::TrackDataType" }
        }
        Signal {
            name: "radioModified"
            Parameter { name: "radio"; type: "DataTypes::TrackDataType" }
        }
        Signal {
            name: "radioRemoved"
            Parameter { name: "radioId"; type: "qulonglong" }
        }
        Method {
            name: "insertTracksList"
            Parameter { name: "tracks"; type: "DataTypes::ListTrackDataType" }
            Parameter { name: "covers"; type: "QHash<QString,QUrl>" }
        }
        Method {
            name: "removeTracksList"
            Parameter { name: "removedTracks"; type: "QList<QUrl>" }
        }
        Method { name: "askRestoredTracks" }
        Method {
            name: "trackHasStartedPlaying"
            Parameter { name: "fileName"; type: "QUrl" }
            Parameter { name: "time"; type: "QDateTime" }
        }
        Method { name: "clearData" }
        Method {
            name: "removeRadio"
            Parameter { name: "radioId"; type: "qulonglong" }
        }
        Method {
            name: "init"
            Parameter { name: "dbName"; type: "string" }
            Parameter { name: "databaseFileName"; type: "string" }
        }
        Method {
            name: "init"
            Parameter { name: "dbName"; type: "string" }
        }
    }
    Component {
        name: "EditableTrackMetadataModel"
        prototype: "TrackMetadataModel"
        exports: ["org.kde.elisa/EditableTrackMetadataModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EditableColumnRoles"
            values: {
                "ReadOnlyRole": 259,
                "RemovableFieldRole": 260
            }
        }
        Property { name: "isDataValid"; type: "bool"; isReadonly: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Property { name: "isDirty"; type: "bool"; isReadonly: true }
        Property { name: "extraMetadata"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "saveTrackModified"
            Parameter { name: "trackDataType"; type: "DataTypes::ListTrackDataType" }
            Parameter { name: "covers"; type: "QHash<QString,QUrl>" }
        }
        Signal {
            name: "deleteRadioData"
            Parameter { name: "radioId"; type: "qulonglong" }
        }
        Method { name: "saveData" }
        Method { name: "deleteRadio" }
        Method {
            name: "removeData"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addData"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "ElisaApplication"
        prototype: "QObject"
        exports: ["org.kde.elisa/ElisaApplication 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "embeddedView"; type: "ElisaUtils::PlayListEntryType"; isReadonly: true }
        Property {
            name: "musicManager"
            type: "MusicListenersManager"
            isReadonly: true
            isPointer: true
        }
        Property { name: "mediaPlayList"; type: "MediaPlayList"; isReadonly: true; isPointer: true }
        Property {
            name: "mediaPlayListProxyModel"
            type: "MediaPlayListProxyModel"
            isReadonly: true
            isPointer: true
        }
        Property { name: "audioPlayer"; type: "AudioWrapper"; isReadonly: true; isPointer: true }
        Property { name: "audioControl"; type: "ManageAudioPlayer"; isReadonly: true; isPointer: true }
        Property {
            name: "playerControl"
            type: "ManageMediaPlayerControl"
            isReadonly: true
            isPointer: true
        }
        Property { name: "manageHeaderBar"; type: "ManageHeaderBar"; isReadonly: true; isPointer: true }
        Property { name: "showNowPlayingBackground"; type: "bool"; isReadonly: true }
        Property { name: "showHeader"; type: "bool"; isReadonly: true }
        Property { name: "showProgressOnTaskBar"; type: "bool"; isReadonly: true }
        Property { name: "showSystemTrayIcon"; type: "bool"; isReadonly: true }
        Property { name: "useFavoriteStyleRatings"; type: "bool"; isReadonly: true }
        Property {
            name: "colorSchemesModel"
            type: "QAbstractItemModel"
            isReadonly: true
            isPointer: true
        }
        Property { name: "initialViewIndex"; type: "int"; isReadonly: true }
        Signal {
            name: "enqueue"
            Parameter { name: "newEntries"; type: "DataTypes::EntryDataList" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Signal { name: "initializationDone" }
        Signal {
            name: "commitDataRequest"
            Parameter { name: "manager"; type: "QSessionManager&" }
        }
        Method { name: "appHelpActivated" }
        Method { name: "aboutApplication" }
        Method { name: "reportBug" }
        Method { name: "configureShortcuts" }
        Method { name: "configureElisa" }
        Method {
            name: "openFiles"
            type: "bool"
            Parameter { name: "files"; type: "QList<QUrl>" }
        }
        Method {
            name: "openFiles"
            type: "bool"
            Parameter { name: "files"; type: "QList<QUrl>" }
            Parameter { name: "workingDirectory"; type: "string" }
        }
        Method {
            name: "activateActionRequested"
            Parameter { name: "actionName"; type: "string" }
            Parameter { name: "parameter"; type: "QVariant" }
        }
        Method {
            name: "activateRequested"
            Parameter { name: "arguments"; type: "QStringList" }
            Parameter { name: "workingDirectory"; type: "string" }
        }
        Method {
            name: "openRequested"
            Parameter { name: "uris"; type: "QList<QUrl>" }
        }
        Method { name: "initialize" }
        Method {
            name: "activateColorScheme"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "action"
            type: "QAction*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "actionShortcut"
            type: "string"
            Parameter { name: "action"; type: "QAction"; isPointer: true }
        }
        Method {
            name: "iconName"
            type: "string"
            Parameter { name: "icon"; type: "QIcon" }
        }
        Method {
            name: "installKeyEventFilter"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "showInFolder"
            Parameter { name: "filePath"; type: "QUrl" }
        }
    }
    Component {
        name: "ElisaConfigurationDialog"
        prototype: "QObject"
        exports: ["org.kde.elisa/ElisaConfigurationDialog 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "rootPath"; type: "QStringList" }
        Property { name: "forceUsageOfSlowFileSystemIndexing"; type: "bool" }
        Property { name: "showNowPlayingBackground"; type: "bool" }
        Property { name: "showHeader"; type: "bool" }
        Property { name: "showProgressInTaskBar"; type: "bool" }
        Property { name: "showSystemTrayIcon"; type: "bool" }
        Property { name: "embeddedView"; type: "ElisaUtils::PlayListEntryType" }
        Property { name: "initialViewIndex"; type: "int" }
        Property { name: "isDirty"; type: "bool"; isReadonly: true }
        Property { name: "playAtStartup"; type: "bool" }
        Property { name: "scanAtStartup"; type: "bool" }
        Property { name: "colorScheme"; type: "string" }
        Property { name: "useFavoriteStyleRatings"; type: "bool" }
        Signal {
            name: "rootPathChanged"
            Parameter { name: "rootPath"; type: "QStringList" }
        }
        Method {
            name: "setRootPath"
            Parameter { name: "rootPath"; type: "QStringList" }
        }
        Method { name: "save" }
        Method { name: "cancel" }
        Method {
            name: "setShowNowPlayingBackground"
            Parameter { name: "showNowPlayingBackground"; type: "bool" }
        }
        Method {
            name: "setShowHeader"
            Parameter { name: "showHeader"; type: "bool" }
        }
        Method {
            name: "setShowProgressInTaskBar"
            Parameter { name: "showProgressInTaskBar"; type: "bool" }
        }
        Method {
            name: "setShowSystemTrayIcon"
            Parameter { name: "showSystemTrayIcon"; type: "bool" }
        }
        Method {
            name: "setForceUsageOfSlowFileSystemIndexing"
            Parameter { name: "forceUsageOfSlowFileSystemIndexing"; type: "bool" }
        }
        Method {
            name: "setEmbeddedView"
            Parameter { name: "embeddedView"; type: "ElisaUtils::PlayListEntryType" }
        }
        Method {
            name: "setInitialViewIndex"
            Parameter { name: "initialViewIndex"; type: "int" }
        }
        Method {
            name: "setPlayAtStartup"
            Parameter { name: "playAtStartup"; type: "bool" }
        }
        Method {
            name: "setScanAtStartup"
            Parameter { name: "scanAtStartup"; type: "bool" }
        }
        Method {
            name: "setColorScheme"
            Parameter { name: "scheme"; type: "string" }
        }
        Method {
            name: "setUseFavoriteStyleRatings"
            Parameter { name: "useFavoriteStyleRatings"; type: "bool" }
        }
        Method {
            name: "removeMusicLocation"
            Parameter { name: "location"; type: "string" }
        }
    }
    Component {
        name: "ElisaUtils"
        exports: ["org.kde.elisa/ElisaUtils 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PlayListEnqueueMode"
            values: {
                "AppendPlayList": 0,
                "ReplacePlayList": 1
            }
        }
        Enum {
            name: "PlayListEnqueueTriggerPlay"
            values: {
                "DoNotTriggerPlay": 0,
                "TriggerPlay": 1
            }
        }
        Enum {
            name: "PlayListEntryType"
            values: {
                "Album": 0,
                "Artist": 1,
                "Genre": 2,
                "Lyricist": 3,
                "Composer": 4,
                "Track": 5,
                "FileName": 6,
                "Container": 7,
                "Radio": 8,
                "Unknown": 9
            }
        }
        Enum {
            name: "FilterType"
            values: {
                "UnknownFilter": 0,
                "NoFilter": 1,
                "FilterById": 2,
                "FilterByGenre": 3,
                "FilterByArtist": 4,
                "FilterByGenreAndArtist": 5,
                "FilterByRecentlyPlayed": 6,
                "FilterByFrequentlyPlayed": 7,
                "FilterByPath": 8
            }
        }
    }
    Component {
        name: "FileBrowserModel"
        prototype: "KDirModel"
        exports: ["org.kde.elisa/FileBrowserModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "isBusy"; type: "bool"; isReadonly: true }
        Method {
            name: "initialize"
            Parameter { name: "manager"; type: "MusicListenersManager"; isPointer: true }
            Parameter { name: "database"; type: "DatabaseInterface"; isPointer: true }
            Parameter { name: "modelType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "filter"; type: "ElisaUtils::FilterType" }
            Parameter { name: "genre"; type: "string" }
            Parameter { name: "artist"; type: "string" }
            Parameter { name: "databaseId"; type: "qulonglong" }
            Parameter { name: "pathFilter"; type: "QUrl" }
        }
        Method {
            name: "initializeByData"
            Parameter { name: "manager"; type: "MusicListenersManager"; isPointer: true }
            Parameter { name: "database"; type: "DatabaseInterface"; isPointer: true }
            Parameter { name: "modelType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "filter"; type: "ElisaUtils::FilterType" }
            Parameter { name: "dataFilter"; type: "DataTypes::DataType" }
        }
    }
    Component {
        name: "FileBrowserProxyModel"
        prototype: "KDirSortFilterProxyModel"
        exports: ["org.kde.elisa/FileBrowserProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "filterText"; type: "string" }
        Property { name: "filterRating"; type: "int" }
        Property { name: "sortedAscending"; type: "bool"; isReadonly: true }
        Property { name: "playList"; type: "MediaPlayListProxyModel"; isPointer: true }
        Signal {
            name: "entriesToEnqueue"
            Parameter { name: "newEntries"; type: "DataTypes::EntryDataList" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Signal {
            name: "filterTextChanged"
            Parameter { name: "filterText"; type: "string" }
        }
        Method {
            name: "enqueueToPlayList"
            Parameter { name: "rootIndex"; type: "QModelIndex" }
        }
        Method {
            name: "replaceAndPlayOfPlayList"
            Parameter { name: "rootIndex"; type: "QModelIndex" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newEntry"; type: "DataTypes::MusicDataType" }
            Parameter { name: "newEntryTitle"; type: "string" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method {
            name: "setFilterText"
            Parameter { name: "filterText"; type: "string" }
        }
        Method {
            name: "setFilterRating"
            Parameter { name: "filterRating"; type: "int" }
        }
        Method {
            name: "setPlayList"
            Parameter { name: "playList"; type: "MediaPlayListProxyModel"; isPointer: true }
        }
        Method {
            name: "sortModel"
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
    }
    Component {
        name: "GridViewProxyModel"
        prototype: "AbstractMediaProxyModel"
        exports: ["org.kde.elisa/GridViewProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "KDirModel"
        prototype: "QAbstractItemModel"
        Signal {
            name: "expand"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "needSequenceIcon"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "sequenceIndex"; type: "int" }
        }
    }
    Component { name: "KDirSortFilterProxyModel"; prototype: "QSortFilterProxyModel" }
    Component {
        name: "ManageAudioPlayer"
        prototype: "QObject"
        exports: ["org.kde.elisa/ManageAudioPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "currentTrack"; type: "QPersistentModelIndex" }
        Property { name: "playListModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "playerSource"; type: "QUrl"; isReadonly: true }
        Property { name: "titleRole"; type: "int" }
        Property { name: "artistNameRole"; type: "int" }
        Property { name: "albumNameRole"; type: "int" }
        Property { name: "urlRole"; type: "int" }
        Property { name: "isPlayingRole"; type: "int" }
        Property { name: "playerStatus"; type: "QMediaPlayer::MediaStatus" }
        Property { name: "playerPlaybackState"; type: "QMediaPlayer::State" }
        Property { name: "playerError"; type: "QMediaPlayer::Error" }
        Property { name: "audioDuration"; type: "qlonglong" }
        Property { name: "playerIsSeekable"; type: "bool" }
        Property { name: "playerPosition"; type: "qlonglong" }
        Property { name: "playControlPosition"; type: "qlonglong" }
        Property { name: "persistentState"; type: "QVariantMap" }
        Signal {
            name: "playerSourceChanged"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal { name: "playerPlay" }
        Signal { name: "playerPause" }
        Signal { name: "playerStop" }
        Signal { name: "skipNextTrack" }
        Signal {
            name: "seek"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "saveUndoPositionInAudioWrapper"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal { name: "restoreUndoPositionInAudioWrapper" }
        Signal {
            name: "sourceInError"
            Parameter { name: "source"; type: "QUrl" }
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
        Signal {
            name: "displayTrackError"
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "startedPlayingTrack"
            Parameter { name: "fileName"; type: "QUrl" }
            Parameter { name: "time"; type: "QDateTime" }
        }
        Signal {
            name: "updateData"
            Parameter { name: "index"; type: "QPersistentModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setCurrentTrack"
            Parameter { name: "currentTrack"; type: "QPersistentModelIndex" }
        }
        Method { name: "saveForUndoClearPlaylist" }
        Method { name: "restoreForUndoClearPlaylist" }
        Method {
            name: "setPlayListModel"
            Parameter { name: "aPlayListModel"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "setUrlRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setIsPlayingRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setPlayerStatus"
            Parameter { name: "playerStatus"; type: "QMediaPlayer::MediaStatus" }
        }
        Method {
            name: "setPlayerPlaybackState"
            Parameter { name: "playerPlaybackState"; type: "QMediaPlayer::State" }
        }
        Method {
            name: "setPlayerError"
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
        Method { name: "ensurePause" }
        Method { name: "ensurePlay" }
        Method { name: "playPause" }
        Method { name: "stop" }
        Method {
            name: "setAudioDuration"
            Parameter { name: "audioDuration"; type: "qlonglong" }
        }
        Method {
            name: "setPlayerIsSeekable"
            Parameter { name: "playerIsSeekable"; type: "bool" }
        }
        Method {
            name: "setPlayerPosition"
            Parameter { name: "playerPosition"; type: "qlonglong" }
        }
        Method {
            name: "setCurrentPlayingForRadios"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "nowPlaying"; type: "string" }
        }
        Method {
            name: "setPlayControlPosition"
            Parameter { name: "playerPosition"; type: "int" }
        }
        Method {
            name: "setPersistentState"
            Parameter { name: "persistentStateValue"; type: "QVariantMap" }
        }
        Method {
            name: "playerSeek"
            Parameter { name: "position"; type: "int" }
        }
        Method { name: "playListFinished" }
        Method {
            name: "tracksDataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Method {
            name: "setTitleRole"
            Parameter { name: "titleRole"; type: "int" }
        }
        Method {
            name: "setArtistNameRole"
            Parameter { name: "artistNameRole"; type: "int" }
        }
        Method {
            name: "setAlbumNameRole"
            Parameter { name: "albumNameRole"; type: "int" }
        }
    }
    Component {
        name: "ManageHeaderBar"
        prototype: "QObject"
        exports: ["org.kde.elisa/ManageHeaderBar 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "currentTrack"; type: "QPersistentModelIndex" }
        Property { name: "artistRole"; type: "int" }
        Property { name: "titleRole"; type: "int" }
        Property { name: "albumRole"; type: "int" }
        Property { name: "albumArtistRole"; type: "int" }
        Property { name: "fileNameRole"; type: "int" }
        Property { name: "imageRole"; type: "int" }
        Property { name: "databaseIdRole"; type: "int" }
        Property { name: "trackTypeRole"; type: "int" }
        Property { name: "albumIdRole"; type: "int" }
        Property { name: "isValidRole"; type: "int" }
        Property { name: "artist"; type: "QVariant"; isReadonly: true }
        Property { name: "title"; type: "QVariant"; isReadonly: true }
        Property { name: "album"; type: "QVariant"; isReadonly: true }
        Property { name: "albumArtist"; type: "QVariant"; isReadonly: true }
        Property { name: "fileUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "image"; type: "QUrl"; isReadonly: true }
        Property { name: "databaseId"; type: "qulonglong"; isReadonly: true }
        Property { name: "trackType"; type: "ElisaUtils::PlayListEntryType"; isReadonly: true }
        Property { name: "albumId"; type: "qulonglong"; isReadonly: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Method {
            name: "setCurrentTrack"
            Parameter { name: "currentTrack"; type: "QPersistentModelIndex" }
        }
        Method { name: "updateCurrentTrackData" }
        Method {
            name: "setArtistRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setTitleRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setAlbumRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setAlbumArtistRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setFileNameRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setImageRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setDatabaseIdRole"
            Parameter { name: "databaseIdRole"; type: "int" }
        }
        Method {
            name: "setTrackTypeRole"
            Parameter { name: "trackTypeRole"; type: "int" }
        }
        Method {
            name: "setAlbumIdRole"
            Parameter { name: "albumIdRole"; type: "int" }
        }
        Method {
            name: "setIsValidRole"
            Parameter { name: "isValidRole"; type: "int" }
        }
    }
    Component {
        name: "ManageMediaPlayerControl"
        prototype: "QObject"
        exports: ["org.kde.elisa/ManageMediaPlayerControl 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "playControlEnabled"; type: "bool"; isReadonly: true }
        Property { name: "skipBackwardControlEnabled"; type: "bool"; isReadonly: true }
        Property { name: "skipForwardControlEnabled"; type: "bool"; isReadonly: true }
        Property { name: "musicPlaying"; type: "bool"; isReadonly: true }
        Property { name: "previousTrack"; type: "QPersistentModelIndex" }
        Property { name: "currentTrack"; type: "QPersistentModelIndex" }
        Property { name: "nextTrack"; type: "QPersistentModelIndex" }
        Method { name: "playerPausedOrStopped" }
        Method { name: "playerPlaying" }
        Method {
            name: "setPreviousTrack"
            Parameter { name: "previousTrack"; type: "QPersistentModelIndex" }
        }
        Method {
            name: "setCurrentTrack"
            Parameter { name: "currentTrack"; type: "QPersistentModelIndex" }
        }
        Method {
            name: "setNextTrack"
            Parameter { name: "nextTrack"; type: "QPersistentModelIndex" }
        }
    }
    Component {
        name: "MediaPlayList"
        prototype: "QAbstractListModel"
        exports: ["org.kde.elisa/MediaPlayList 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColumnsRoles"
            values: {
                "TitleRole": 257,
                "SecondaryTextRole": 258,
                "ImageUrlRole": 259,
                "ShadowForImageRole": 260,
                "ChildModelRole": 261,
                "DurationRole": 262,
                "StringDurationRole": 263,
                "ArtistRole": 264,
                "AllArtistsRole": 265,
                "HighestTrackRating": 266,
                "AlbumRole": 267,
                "AlbumArtistRole": 268,
                "IsValidAlbumArtistRole": 269,
                "TrackNumberRole": 270,
                "DiscNumberRole": 271,
                "RatingRole": 272,
                "GenreRole": 273,
                "LyricistRole": 274,
                "ComposerRole": 275,
                "CommentRole": 276,
                "YearRole": 277,
                "ChannelsRole": 278,
                "BitRateRole": 279,
                "SampleRateRole": 280,
                "ResourceRole": 281,
                "IdRole": 282,
                "ParentIdRole": 283,
                "DatabaseIdRole": 284,
                "IsSingleDiscAlbumRole": 285,
                "ContainerDataRole": 286,
                "IsPartialDataRole": 287,
                "AlbumIdRole": 288,
                "HasEmbeddedCover": 289,
                "FileModificationTime": 290,
                "FirstPlayDate": 291,
                "LastPlayDate": 292,
                "PlayCounter": 293,
                "PlayFrequency": 294,
                "ElementTypeRole": 295,
                "LyricsRole": 296,
                "FullDataRole": 297,
                "IsDirectoryRole": 298,
                "IsPlayListRole": 299,
                "FilePathRole": 300,
                "IsValidRole": 301,
                "CountRole": 302,
                "IsPlayingRole": 303,
                "AlbumSectionRole": 304,
                "MetadataModifiableRole": 305
            }
        }
        Enum {
            name: "PlayState"
            values: {
                "NotPlaying": 0,
                "IsPlaying": 1,
                "IsPaused": 2
            }
        }
        Signal {
            name: "newTrackByNameInList"
            Parameter { name: "title"; type: "QVariant" }
            Parameter { name: "artist"; type: "QVariant" }
            Parameter { name: "album"; type: "QVariant" }
            Parameter { name: "trackNumber"; type: "QVariant" }
            Parameter { name: "discNumber"; type: "QVariant" }
        }
        Signal {
            name: "newEntryInList"
            Parameter { name: "newDatabaseId"; type: "qulonglong" }
            Parameter { name: "entryTitle"; type: "string" }
            Parameter { name: "databaseIdType"; type: "ElisaUtils::PlayListEntryType" }
        }
        Signal {
            name: "newUrlInList"
            Parameter { name: "entryUrl"; type: "QUrl" }
            Parameter { name: "databaseIdType"; type: "ElisaUtils::PlayListEntryType" }
        }
        Method {
            name: "tracksListAdded"
            Parameter { name: "newDatabaseId"; type: "qulonglong" }
            Parameter { name: "entryTitle"; type: "string" }
            Parameter { name: "databaseIdType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "tracks"; type: "MediaPlayList::ListTrackDataType" }
        }
        Method {
            name: "trackChanged"
            Parameter { name: "track"; type: "MediaPlayList::TrackDataType" }
        }
        Method {
            name: "trackRemoved"
            Parameter { name: "trackId"; type: "qulonglong" }
        }
        Method {
            name: "trackInError"
            Parameter { name: "sourceInError"; type: "QUrl" }
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
        Method {
            name: "enqueueFilesList"
            Parameter { name: "newEntries"; type: "DataTypes::EntryDataList" }
        }
        Method {
            name: "enqueueOneEntry"
            Parameter { name: "entryData"; type: "DataTypes::EntryData" }
        }
        Method {
            name: "enqueueMultipleEntries"
            Parameter { name: "entriesData"; type: "DataTypes::EntryDataList" }
        }
    }
    Component {
        name: "MediaPlayListProxyModel"
        prototype: "QAbstractProxyModel"
        exports: ["org.kde.elisa/MediaPlayListProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Repeat"
            values: {
                "None": 0,
                "One": 1,
                "Playlist": 2
            }
        }
        Property { name: "persistentState"; type: "QVariantMap" }
        Property { name: "previousTrack"; type: "QPersistentModelIndex"; isReadonly: true }
        Property { name: "currentTrack"; type: "QPersistentModelIndex"; isReadonly: true }
        Property { name: "nextTrack"; type: "QPersistentModelIndex"; isReadonly: true }
        Property { name: "repeatMode"; type: "Repeat" }
        Property { name: "shufflePlayList"; type: "bool" }
        Property { name: "remainingTracks"; type: "int"; isReadonly: true }
        Property { name: "currentTrackRow"; type: "int"; isReadonly: true }
        Property { name: "tracksCount"; type: "int"; isReadonly: true }
        Signal {
            name: "previousTrackChanged"
            Parameter { name: "previousTrack"; type: "QPersistentModelIndex" }
        }
        Signal {
            name: "currentTrackChanged"
            Parameter { name: "currentTrack"; type: "QPersistentModelIndex" }
        }
        Signal {
            name: "nextTrackChanged"
            Parameter { name: "nextTrack"; type: "QPersistentModelIndex" }
        }
        Signal { name: "previousTrackDataChanged" }
        Signal { name: "currentTrackDataChanged" }
        Signal { name: "nextTrackDataChanged" }
        Signal { name: "ensurePlay" }
        Signal { name: "playListFinished" }
        Signal { name: "playListLoaded" }
        Signal { name: "playListLoadFailed" }
        Signal { name: "clearPlayListPlayer" }
        Signal { name: "undoClearPlayListPlayer" }
        Signal { name: "displayUndoNotification" }
        Signal { name: "hideUndoNotification" }
        Signal {
            name: "seek"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "entryUrl"; type: "QUrl" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newEntry"; type: "DataTypes::MusicDataType" }
            Parameter { name: "newEntryTitle"; type: "string" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newEntries"; type: "DataTypes::EntryDataList" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method {
            name: "setRepeatMode"
            Parameter { name: "value"; type: "Repeat" }
        }
        Method {
            name: "setShufflePlayList"
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "trackInError"
            Parameter { name: "sourceInError"; type: "QUrl" }
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
        Method { name: "skipNextTrack" }
        Method {
            name: "skipPreviousTrack"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "switchTo"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "removeSelection"
            Parameter { name: "selection"; type: "QList<int>" }
        }
        Method {
            name: "removeRow"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "moveRow"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
        }
        Method { name: "clearPlayList" }
        Method { name: "undoClearPlayList" }
        Method {
            name: "savePlayList"
            type: "bool"
            Parameter { name: "fileName"; type: "QUrl" }
        }
        Method {
            name: "loadPlayList"
            Parameter { name: "fileName"; type: "QUrl" }
        }
        Method {
            name: "setPersistentState"
            Parameter { name: "persistentState"; type: "QVariantMap" }
        }
        Method {
            name: "enqueueDirectory"
            Parameter { name: "fileName"; type: "QUrl" }
            Parameter { name: "databaseIdType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
            Parameter { name: "depth"; type: "int" }
        }
    }
    Component {
        name: "Mpris2"
        prototype: "QObject"
        exports: ["org.kde.elisa/Mpris2 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "playerName"; type: "string" }
        Property { name: "playListModel"; type: "MediaPlayListProxyModel"; isPointer: true }
        Property { name: "audioPlayerManager"; type: "ManageAudioPlayer"; isPointer: true }
        Property { name: "manageMediaPlayerControl"; type: "ManageMediaPlayerControl"; isPointer: true }
        Property { name: "headerBarManager"; type: "ManageHeaderBar"; isPointer: true }
        Property { name: "audioPlayer"; type: "AudioWrapper"; isPointer: true }
        Property { name: "showProgressOnTaskBar"; type: "bool" }
        Signal { name: "raisePlayer" }
        Method {
            name: "setPlayerName"
            Parameter { name: "playerName"; type: "string" }
        }
        Method {
            name: "setPlayListModel"
            Parameter { name: "playListModel"; type: "MediaPlayListProxyModel"; isPointer: true }
        }
        Method {
            name: "setAudioPlayerManager"
            Parameter { name: "audioPlayerManager"; type: "ManageAudioPlayer"; isPointer: true }
        }
        Method {
            name: "setManageMediaPlayerControl"
            Parameter { name: "manageMediaPlayerControl"; type: "ManageMediaPlayerControl"; isPointer: true }
        }
        Method {
            name: "setHeaderBarManager"
            Parameter { name: "headerBarManager"; type: "ManageHeaderBar"; isPointer: true }
        }
        Method {
            name: "setAudioPlayer"
            Parameter { name: "audioPlayer"; type: "AudioWrapper"; isPointer: true }
        }
        Method {
            name: "setShowProgressOnTaskBar"
            Parameter { name: "value"; type: "bool" }
        }
    }
    Component {
        name: "MusicListenersManager"
        prototype: "QObject"
        exports: ["org.kde.elisa/MusicListenersManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "viewDatabase"; type: "DatabaseInterface"; isReadonly: true; isPointer: true }
        Property { name: "importedTracksCount"; type: "int"; isReadonly: true }
        Property { name: "elisaApplication"; type: "ElisaApplication"; isPointer: true }
        Property { name: "tracksListener"; type: "TracksListener"; isReadonly: true; isPointer: true }
        Property { name: "indexerBusy"; type: "bool"; isReadonly: true }
        Property { name: "fileSystemIndexerActive"; type: "bool"; isReadonly: true }
        Property { name: "balooIndexerActive"; type: "bool"; isReadonly: true }
        Property { name: "balooIndexerAvailable"; type: "bool"; isReadonly: true }
        Property { name: "androidIndexerActive"; type: "bool"; isReadonly: true }
        Property { name: "androidIndexerAvailable"; type: "bool"; isReadonly: true }
        Signal { name: "applicationIsTerminating" }
        Signal {
            name: "removeTracksInError"
            Parameter { name: "tracks"; type: "QList<QUrl>" }
        }
        Signal {
            name: "displayTrackError"
            Parameter { name: "fileName"; type: "string" }
        }
        Signal { name: "clearDatabase" }
        Signal { name: "clearedDatabase" }
        Method { name: "databaseReady" }
        Method { name: "applicationAboutToQuit" }
        Method {
            name: "setElisaApplication"
            Parameter { name: "elisaApplication"; type: "ElisaApplication"; isPointer: true }
        }
        Method {
            name: "playBackError"
            Parameter { name: "sourceInError"; type: "QUrl" }
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
        Method {
            name: "deleteElementById"
            Parameter { name: "entryType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "databaseId"; type: "qulonglong" }
        }
        Method {
            name: "connectModel"
            Parameter { name: "dataLoader"; type: "ModelDataLoader"; isPointer: true }
        }
        Method { name: "scanCollection" }
        Method {
            name: "updateSingleFileMetaData"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "role"; type: "DataTypes::ColumnsRoles" }
            Parameter { name: "data"; type: "QVariant" }
        }
    }
    Component {
        name: "ProgressIndicator"
        prototype: "QObject"
        exports: ["org.kde.elisa/ProgressIndicator 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "position"; type: "int" }
        Property { name: "progressDuration"; type: "string"; isReadonly: true }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "int" }
        }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        exports: ["org.kde.elisa/AbstractItemModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        exports: ["org.kde.elisa/AbstractProxyModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterRegularExpression"; type: "QRegularExpression" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Property { name: "recursiveFilteringEnabled"; type: "bool" }
        Signal {
            name: "dynamicSortFilterChanged"
            Parameter { name: "dynamicSortFilter"; type: "bool" }
        }
        Signal {
            name: "filterCaseSensitivityChanged"
            Parameter { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        }
        Signal {
            name: "sortCaseSensitivityChanged"
            Parameter { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        }
        Signal {
            name: "sortLocaleAwareChanged"
            Parameter { name: "sortLocaleAware"; type: "bool" }
        }
        Signal {
            name: "sortRoleChanged"
            Parameter { name: "sortRole"; type: "int" }
        }
        Signal {
            name: "filterRoleChanged"
            Parameter { name: "filterRole"; type: "int" }
        }
        Signal {
            name: "recursiveFilteringEnabledChanged"
            Parameter { name: "recursiveFilteringEnabled"; type: "bool" }
        }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "regExp"; type: "QRegExp" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "regularExpression"; type: "QRegularExpression" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "TrackContextMetaDataModel"
        prototype: "TrackMetadataModel"
        exports: ["org.kde.elisa/TrackContextMetaDataModel 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "TrackMetadataModel"
        prototype: "QAbstractListModel"
        exports: ["org.kde.elisa/TrackMetadataModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColumnRoles"
            values: {
                "ItemNameRole": 257,
                "ItemTypeRole": 258
            }
        }
        Enum {
            name: "ItemType"
            values: {
                "TextEntry": 0,
                "UrlEntry": 1,
                "IntegerEntry": 2,
                "RatingEntry": 3,
                "DateEntry": 4,
                "DurationEntry": 5,
                "LongTextEntry": 6
            }
        }
        Property { name: "coverUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "fileUrl"; type: "string"; isReadonly: true }
        Property { name: "databaseId"; type: "qulonglong"; isReadonly: true }
        Property { name: "manager"; type: "MusicListenersManager"; isPointer: true }
        Property { name: "lyrics"; type: "string"; isReadonly: true }
        Signal {
            name: "needDataByDatabaseIdAndUrl"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "databaseId"; type: "qulonglong" }
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal {
            name: "needDataByUrl"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "fileName"; type: "QUrl" }
        }
        Method {
            name: "trackData"
            Parameter { name: "trackData"; type: "TrackMetadataModel::TrackDataType" }
        }
        Method {
            name: "initializeByIdAndUrl"
            Parameter { name: "type"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "databaseId"; type: "qulonglong" }
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "initializeByUrl"
            Parameter { name: "type"; type: "ElisaUtils::PlayListEntryType" }
            Parameter { name: "url"; type: "QUrl" }
        }
        Method { name: "initializeForNewRadio" }
        Method {
            name: "setManager"
            Parameter { name: "newManager"; type: "MusicListenersManager"; isPointer: true }
        }
        Method {
            name: "setDatabase"
            Parameter { name: "trackDatabase"; type: "DatabaseInterface"; isPointer: true }
        }
        Method {
            name: "radioData"
            Parameter { name: "radiosData"; type: "TrackMetadataModel::TrackDataType" }
        }
    }
    Component {
        name: "ViewConfigurationData"
        prototype: "QObject"
        exports: ["org.kde.elisa/ViewConfigurationData 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "filterType"; type: "ElisaUtils::FilterType"; isReadonly: true }
        Property { name: "expectedDepth"; type: "int"; isReadonly: true }
        Property { name: "mainTitle"; type: "string"; isReadonly: true }
        Property { name: "secondaryTitle"; type: "string"; isReadonly: true }
        Property { name: "imageUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "dataType"; type: "ElisaUtils::PlayListEntryType"; isReadonly: true }
        Property { name: "model"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property {
            name: "associatedProxyModel"
            type: "QAbstractProxyModel"
            isReadonly: true
            isPointer: true
        }
        Property { name: "viewDefaultIcon"; type: "QUrl"; isReadonly: true }
        Property { name: "dataFilter"; type: "DataTypes::DataType"; isReadonly: true }
        Property { name: "viewShowRating"; type: "ViewManager::ViewCanBeRated"; isReadonly: true }
        Property {
            name: "viewDelegateDisplaySecondaryText"
            type: "ViewManager::DelegateUseSecondaryText"
            isReadonly: true
        }
        Property { name: "isTreeModel"; type: "ViewManager::IsTreeModelType"; isReadonly: true }
        Property { name: "sortRole"; type: "int"; isReadonly: true }
        Property { name: "sortRoles"; type: "QVector<int>"; isReadonly: true }
        Property { name: "sortRoleNames"; type: "QVector<QString>"; isReadonly: true }
        Property { name: "sortOrder"; type: "Qt::SortOrder"; isReadonly: true }
        Property { name: "sortOrderNames"; type: "QVector<QString>"; isReadonly: true }
        Property { name: "displaySingleAlbum"; type: "ViewManager::AlbumCardinality"; isReadonly: true }
        Property { name: "showDiscHeaders"; type: "ViewManager::AlbumViewStyle"; isReadonly: true }
        Property { name: "radioCase"; type: "ViewManager::RadioSpecificStyle"; isReadonly: true }
    }
    Component {
        name: "ViewManager"
        prototype: "QObject"
        exports: ["org.kde.elisa/ViewManager 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AlbumCardinality"
            values: {
                "SingleAlbum": 1,
                "MultipleAlbum": 0
            }
        }
        Enum {
            name: "AlbumViewStyle"
            values: {
                "NoDiscHeaders": 0,
                "DiscHeaders": 1
            }
        }
        Enum {
            name: "RadioSpecificStyle"
            values: {
                "IsTrack": 0,
                "IsRadio": 1
            }
        }
        Enum {
            name: "DelegateUseSecondaryText"
            values: {
                "DelegateWithSecondaryText": 1,
                "DelegateWithoutSecondaryText": 0
            }
        }
        Enum {
            name: "ViewCanBeRated"
            values: {
                "ViewShowRating": 1,
                "ViewHideRating": 0
            }
        }
        Enum {
            name: "ViewPresentationType"
            values: {
                "ContextView": 0,
                "GridView": 1,
                "ListView": 2,
                "UnknownViewPresentation": 3
            }
        }
        Enum {
            name: "ModelType"
            values: {
                "GenericDataModel": 0,
                "FileBrowserModel": 1,
                "UnknownModelType": 2
            }
        }
        Enum {
            name: "IsTreeModelType"
            values: {
                "IsTreeModel": 1,
                "IsFlatModel": 0
            }
        }
        Property { name: "viewIndex"; type: "int"; isReadonly: true }
        Property { name: "initialIndex"; type: "int" }
        Property { name: "viewsData"; type: "ViewsListData"; isPointer: true }
        Signal {
            name: "openGridView"
            Parameter { name: "configurationData"; type: "ViewConfigurationData"; isPointer: true }
        }
        Signal {
            name: "openListView"
            Parameter { name: "configurationData"; type: "ViewConfigurationData"; isPointer: true }
        }
        Signal {
            name: "switchContextView"
            Parameter { name: "expectedDepth"; type: "int" }
            Parameter { name: "mainTitle"; type: "string" }
            Parameter { name: "imageUrl"; type: "QUrl" }
        }
        Signal { name: "popOneView" }
        Method {
            name: "openView"
            Parameter { name: "viewIndex"; type: "int" }
        }
        Method {
            name: "openChildView"
            Parameter { name: "fullData"; type: "DataTypes::MusicDataType" }
        }
        Method {
            name: "openAlbumView"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "artist"; type: "string" }
            Parameter { name: "databaseId"; type: "qulonglong" }
            Parameter { name: "albumCoverUrl"; type: "QUrl" }
        }
        Method {
            name: "openArtistView"
            Parameter { name: "artist"; type: "string" }
        }
        Method { name: "openNowPlaying" }
        Method { name: "viewIsLoaded" }
        Method { name: "goBack" }
        Method {
            name: "setViewsData"
            Parameter { name: "viewsData"; type: "ViewsListData"; isPointer: true }
        }
        Method {
            name: "sortOrderChanged"
            Parameter { name: "sortOrder"; type: "Qt::SortOrder" }
        }
        Method {
            name: "sortRoleChanged"
            Parameter { name: "sortRole"; type: "int" }
        }
        Method {
            name: "setInitialIndex"
            Parameter { name: "newIndex"; type: "int" }
        }
    }
    Component {
        name: "ViewsListData"
        prototype: "QObject"
        exports: ["org.kde.elisa/ViewsListData 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "embeddedCategory"; type: "ElisaUtils::PlayListEntryType" }
        Property { name: "manager"; type: "MusicListenersManager"; isPointer: true }
        Property { name: "database"; type: "DatabaseInterface"; isPointer: true }
        Property { name: "isFullyInitialized"; type: "bool"; isReadonly: true }
        Signal {
            name: "needData"
            Parameter { name: "dataType"; type: "ElisaUtils::PlayListEntryType" }
        }
        Signal {
            name: "dataAboutToBeAdded"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "endIndex"; type: "int" }
        }
        Signal { name: "dataAdded" }
        Signal {
            name: "dataAboutToBeRemoved"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "endIndex"; type: "int" }
        }
        Signal { name: "dataRemoved" }
        Signal {
            name: "dataModified"
            Parameter { name: "index"; type: "int" }
        }
        Signal { name: "dataAboutToBeReset" }
        Signal { name: "dataReset" }
        Method {
            name: "setEmbeddedCategory"
            Parameter { name: "aEmbeddedView"; type: "ElisaUtils::PlayListEntryType" }
        }
        Method {
            name: "setManager"
            Parameter { name: "aManager"; type: "MusicListenersManager"; isPointer: true }
        }
        Method {
            name: "setDatabase"
            Parameter { name: "aDatabase"; type: "DatabaseInterface"; isPointer: true }
        }
        Method {
            name: "genresAdded"
            Parameter { name: "newData"; type: "DataTypes::ListGenreDataType" }
        }
        Method {
            name: "artistsAdded"
            Parameter { name: "newData"; type: "DataTypes::ListArtistDataType" }
        }
        Method {
            name: "artistRemoved"
            Parameter { name: "removedDatabaseId"; type: "qulonglong" }
        }
        Method {
            name: "albumsAdded"
            Parameter { name: "newData"; type: "DataTypes::ListAlbumDataType" }
        }
        Method {
            name: "albumRemoved"
            Parameter { name: "removedDatabaseId"; type: "qulonglong" }
        }
        Method {
            name: "albumModified"
            Parameter { name: "modifiedAlbum"; type: "DataTypes::AlbumDataType" }
        }
        Method { name: "cleanedDatabase" }
    }
    Component {
        name: "ViewsModel"
        prototype: "QAbstractListModel"
        exports: ["org.kde.elisa/ViewsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "viewsData"; type: "ViewsListData"; isPointer: true }
        Method {
            name: "setViewsData"
            Parameter { name: "viewsData"; type: "ViewsListData"; isPointer: true }
        }
    }
    Component {
        name: "ViewsProxyModel"
        prototype: "QSortFilterProxyModel"
        exports: ["org.kde.elisa/ViewsProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
    }
}
